"""
Compiler Optimization Flag Definitions and Management

This module defines comprehensive sets of compiler optimization flags for different
optimization levels in GCC and LLVM. It provides the foundation for testing
compiler behavior across various optimization configurations and enables
systematic exploration of optimization flag combinations.

Key Components:

1. GCC Optimization Levels:
   - O0: No optimization (baseline)
   - O1: Basic optimizations with minimal compilation time impact
   - O2: Standard optimizations balancing performance and compilation time
   - O3: Aggressive optimizations prioritizing performance over compilation time
   - Os: Size optimization prioritizing code size reduction
   - Additional experimental and advanced optimization flags

2. Optimization Flag Categories:
   - Basic optimizations: Dead code elimination, constant propagation, etc.
   - Loop optimizations: Vectorization, unrolling, interchange, etc.
   - Interprocedural optimizations: Inlining, constant propagation across functions
   - Architecture-specific optimizations: Target-specific instruction selection
   - Advanced optimizations: Profile-guided optimization, link-time optimization

3. LLVM Optimization Passes:
   - Individual LLVM optimization passes for fine-grained testing
   - Pass ordering and dependency management
   - Integration with LLVM's opt tool for IR-level optimization testing

4. Optimization Set Operations:
   - Set arithmetic for optimization flag combinations
   - Exclusion and inclusion logic for compatible flag sets
   - Random optimization flag selection for testing

Usage:
    This module is used by the attribute insertion testing framework to:
    1. Define baseline optimization levels for differential testing
    2. Generate random optimization flag combinations
    3. Create optimization attributes for function-level optimization control
    4. Support both GCC and LLVM optimization testing workflows

The optimization flags defined here are used to:
- Generate optimize() attributes with specific flag combinations
- Test compiler behavior across different optimization levels
- Identify optimization-related compiler bugs and miscompilations
- Evaluate the interaction between attributes and optimization flags

Example optimization sets:
- option_O1: Basic optimizations enabled at -O1
- option_O2: All optimizations enabled at -O2 (includes O1 + additional)
- option_O3: Aggressive optimizations enabled at -O3 (includes O2 + additional)
- llvm_opt_pass: Individual LLVM optimization passes

Part of the LLM4OPT project for automated compiler testing and optimization.
"""

# GCC Optimization Level Definitions
# These sets define which optimization flags are enabled at each standard optimization level

option_O1 = set([
    '-fauto-inc-dec',
    '-fbranch-count-reg',
    '-fcombine-stack-adjustments',
    '-fcompare-elim',
    '-fcprop-registers',
    '-fdce',
    '-fdefer-pop',
    '-fdelayed-branch',
    '-fdse',
    '-fforward-propagate',
    '-fguess-branch-probability',
    '-fif-conversion',
    '-fif-conversion2',
    '-finline-functions-called-once',
    '-fipa-modref',
    '-fipa-profile',
    '-fipa-pure-const',
    '-fipa-reference',
    '-fipa-reference-addressable',
    '-fmerge-constants',
    '-fmove-loop-invariants',
    '-fmove-loop-stores',
    '-fomit-frame-pointer',
    '-freorder-blocks',
    '-fshrink-wrap',
    '-fshrink-wrap-separate',
    '-fsplit-wide-types',
    '-fssa-backprop',
    '-fssa-phiopt',
    '-ftree-bit-ccp',
    '-ftree-ccp',
    '-ftree-ch',
    '-ftree-coalesce-vars',
    '-ftree-copy-prop',
    '-ftree-dce',
    '-ftree-dominator-opts',
    '-ftree-dse',
    '-ftree-forwprop',
    '-ftree-fre',
    '-ftree-phiprop',
    '-ftree-pta',
    '-ftree-scev-cprop',
    '-ftree-sink',
    '-ftree-slsr',
    '-ftree-sra',
    '-ftree-ter',
    '-funit-at-a-time',
])

option_O2_add = set([
    '-falign-functions',
    '-falign-jumps',
    '-falign-labels',
    '-falign-loops',
    '-fcaller-saves',
    '-fcode-hoisting',
    '-fcrossjumping',
    '-fcse-follow-jumps',
    '-fcse-skip-blocks',
    '-fdelete-null-pointer-checks',
    '-fdevirtualize',
    '-fdevirtualize-speculatively',
    '-fexpensive-optimizations',
    '-ffinite-loops',
    '-fgcse',
    '-fgcse-lm',
    '-fhoist-adjacent-loads',
    '-finline-functions',
    '-finline-small-functions',
    '-findirect-inlining',
    '-fipa-bit-cp',
    '-fipa-cp',
    '-fipa-icf',
    '-fipa-ra',
    '-fipa-sra',
    '-fipa-vrp',
    '-fisolate-erroneous-paths-dereference',
    '-flra-remat',
    '-foptimize-sibling-calls',
    '-foptimize-strlen',
    '-fpartial-inlining',
    '-fpeephole2',
    '-freorder-blocks-algorithm=stc',
    '-freorder-blocks-and-partition',
    '-freorder-functions',
    '-frerun-cse-after-loop',
    '-fschedule-insns',
    '-fschedule-insns2',
    '-fsched-interblock',
    '-fsched-spec',
    '-fstore-merging',
    '-fstrict-aliasing',
    '-fthread-jumps',
    '-ftree-builtin-call-dce',
    '-ftree-loop-vectorize',
    '-ftree-pre',
    '-ftree-slp-vectorize',
    '-ftree-switch-conversion',
    '-ftree-tail-merge',
    '-ftree-vrp',
    '-fvect-cost-model=very-cheap',
])

option_O2 = option_O1 | option_O2_add

option_O3_add = set([
    '-fgcse-after-reload',
    '-fipa-cp-clone',
    '-floop-interchange',
    '-floop-unroll-and-jam',
    '-fpeel-loops',
    '-fpredictive-commoning',
    '-fsplit-loops',
    '-fsplit-paths',
    '-ftree-loop-distribution',
    '-ftree-partial-pre',
    '-funswitch-loops',
    '-fvect-cost-model=dynamic',
    '-fversion-loops-for-strides',
])

option_O3 = option_O2 | option_O3_add

option_Os_sub = set([
'-falign-functions',
'-falign-jumps',
'-falign-labels',
'-falign-loops',
'-fprefetch-loop-arrays',
'-freorder-blocks-algorithm=stc',
])

option_Os = option_O2 - option_Os_sub

# option_O0_ex = option_O3
# option_O1_ex = option_O3 - option_O1
# option_O2_ex = option_O3 - option_O2
# option_Os_ex = option_O3 - option_Os

gcc_option_more = [
    '-ffp-contract=off',
    '-ffp-contract=fast',
    '-ffp-contract=on',
    '-finline-stringops'
    '-ffreestanding',
    '-fno-builtin',
    '-fno-inline',
    '-fearly-inlining',
    '-fkeep-inline-functions',
    '-fkeep-static-functions',
    '-fkeep-static-consts',
    '-fmerge-all-constants',
    '-fmodulo-sched',
    '-fmodulo-sched-allow-regmoves',
    '-ffunction-cse',
    '-fzero-initialized-in-bss',
    '-fsplit-wide-types-early',
    '-fgcse-sm',
    '-fgcse-las',
    '-faggressive-loop-optimizations',
    '-funconstrained-commons',
    '-fdevirtualize-at-ltrans',
    '-flifetime-dse',
    '-flive-range-shrinkage',
    '-fira-algorithm=priority',
    '-fira-region=all',
    '-fira-region=mixed',
    '-fira-region=one',
    '-fira-hoist-pressure',
    '-fira-loop-pressure',
    '-fno-ira-share-save-slots',
    '-fno-ira-share-spill-slots',
    '-fsched-pressure',
    '-fsched-spec-load',
    '-fsched-spec-load-dangerous',
    '-fsched-stalled-insns',
    '-fsched-stalled-insns=0',
    '-fsched-stalled-insns-dep',
    '-fsched-stalled-insns-dep=0',
    '-fsched2-use-superblocks',
    '-fsched-group-heuristic',
    '-fsched-critical-path-heuristic',
    '-fsched-spec-insn-heuristic',
    '-fsched-rank-heuristic',
    '-fsched-last-insn-heuristic',
    '-fsched-dep-count-heuristic',
    '-freschedule-modulo-scheduled-loops',
    '-fselective-scheduling',
    '-fselective-scheduling2',
    '-fsel-sched-pipelining',
    '-fsel-sched-pipelining-outer-loops',
    '-fsemantic-interposition',
    '-fshrink-wrap-separate',
    '-fconserve-stack',
    '-ftree-reassoc',
    '-fipa-pta',
    '-fisolate-erroneous-paths-attribute',
    '-ftree-loop-linear',
    '-floop-strip-mine',
    '-floop-block',
    '-fgraphite-identity',
    '-floop-nest-optimize',
    '-floop-parallelize-all',
    '-ftree-loop-if-conver',
    '-ftree-loop-im',
    '-ftree-loop-ivcanon',
    '-fivopts',
    '-ftree-vectorize',
    "-ftrivial-auto-var-init='uninitialized'",
    "-ftrivial-auto-var-init='pattern'",
    "-ftrivial-auto-var-init='zero'",
    '-fvariable-expansion-in-unroller',
    '-flimit-function-alignment',
    '-fmin-function-alignment',
    '-fweb',
    '-ffat-lto-objects',
    '-ffold-mem-offsets',
    '-ffloat-store',
    '-fexcess-precision=fast',
    '-fexcess-precision=standard',
    '-ffast-math',
    '-fmath-errno',
    '-funsafe-math-optimizations',
    '-ffinite-math-only',
    '-fassociative-math',
    '-freciprocal-math',
    '-ffinite-math-only',
    '-fsigned-zeros',
    '-ftrapping-math',
    '-frounding-math',
    '-fsignaling-nans',
    '-ffp-int-builtin-inexact',
    '-fsingle-precision-constant',
    '-fcx-limited-range',
    '-frename-registers',
    '-funroll-loops',
    '-ftracer',
    '-fprofile-reorder-functions',
    '-funroll-all-loops',
    '-ffunction-sections',
    '-fdata-sections',
    '-fstdarg-opt',
    # '-fsection-anchors',
]


gcc_pragmas = [
    '#pragma GCC optimize("Ofast")',
    '#pragma GCC optimize("O0")',
    '#pragma GCC optimize("O1")',
    '#pragma GCC optimize("O2")',
    '#pragma GCC optimize("O3")',
    '#pragma GCC optimize("Os")',
]


llvm_opt_pass = set([
    'dace',
    'always-inline',
    'argpromotion',
    'block-placement',
    'break-crit-edges',
    # 'codegenprepare',
    'constmerge',
    'dce',
    'deadargelim',
    'dse',
    'function-attrs',
    'globaldce',
    'globalopt',
    'gvn',
    'indvars',
    'inline',
    'instcombine',
    'aggressive-instcombine',
    'internalize',
    'ipsccp',
    'jump-threading',
    'lcssa',
    'licm',
    'loop-deletion',
    # 'loop-extract',
    'loop-reduce',
    'loop-rotate',
    'loop-simplify',
    'loop-unroll',
    'loop-unroll-and-jam',
    'lower-global-dtors',
    'lower-atomic',
    'lower-invoke',
    'lower-switch',
    'mem2reg',
    'memcpyopt',
    'mergefunc',
    'mergereturn',
    'partial-inliner',
    'reassociate',
    'rel-lookup-table-converter',
    'reg2mem',
    'sroa',
    'sccp',
    'simplifycfg',
    'sink',
    'simple-loop-unswitch',
    'strip',
    'strip-dead-debug-info',
    'strip-dead-prototypes',
    'strip-debug-declare',
    'strip-nondebug',
    'tailcallelim'
])

gcc_attr_option_combine_map = {
    'expected_throw': '-fharden-control-flow-redundancy',
    'no_instrument_function': ['-finstrument-functions', '-p', '-pg'],
    'no_split_stack': '-fsplit-stack',
    # 'no_stack_limit': ['-fstack-limit-register', '-fstack-limit-symbol'],
    'stack_protect': ['-fstack-protector', '-fstack-protector-strong', '-fstack-protector-explicit'],
    'tainted_args': ['-Wanalyzer-tainted-allocation-size', '-Wanalyzer-tainted-array-index', '-Wanalyzer-tainted-divisor', '-Wanalyzer-tainted-offset', '-Wanalyzer-tainted-size'],

}

gcc_attr_option_exclude_map = {
    'externally_visible': '-fwhole-program',
    'hot': '-fprofile-use',
}

llvm_attr_option_combine_map = {
    'no_split_stack': '-fsplit-stack',
    'no_profile_instrument_function': ['-fprofile-generate', '-fprofile-instr-generate', '-fcs-profile-generate', '-fprofile-arcs'],
    'no_stack_protector': '-fstack-protector',
    'nouwtable': '-funwind-tables',
    
}

all_optimization = [
    '-faggressive-loop-optimizations',
    '-falign-functions',
    '-falign-jumps',
    '-falign-labels',
    '-falign-loops',
    '-fallocation-dce',
    '-fallow-store-data-races',
    '-fassociative-math',
    '-fasynchronous-unwind-tables',
    '-fauto-inc-dec',
    '-fbit-tests',
    '-fbranch-count-reg',
    '-fbranch-probabilities',
    '-fcaller-saves',
    '-fcode-hoisting',
    '-fcombine-stack-adjustments',
    '-fcompare-elim',
    '-fconserve-stack',
    '-fcprop-registers',
    '-fcrossjumping',
    '-fcse-follow-jumps',
    '-fcx-fortran-rules',
    '-fcx-limited-range',
    '-fdce',
    '-fdefer-pop',
    '-fdelayed-branch',
    '-fdelete-dead-exceptions',
    '-fdevirtualize',
    '-fdevirtualize-speculatively',
    '-fdse',
    '-fearly-inlining',
    '-fexpensive-optimizations',
    '-fext-dce',
    '-ffinite-loops',
    '-ffinite-math-only',
    '-ffloat-store',
    '-ffold-mem-offsets',
    '-fforward-propagate',
    '-ffp-int-builtin-inexact',
    '-ffunction-cse',
    '-fgcse',
    '-fgcse-after-reload',
    '-fgcse-las',
    '-fgcse-lm',
    '-fgcse-sm',
    '-fgraphite',
    '-fgraphite-identity',
    '-fguess-branch-probability',
    '-fhardcfr-skip-leaf',
    '-fharden-compares',
    '-fharden-conditional-branches',
    '-fharden-control-flow-redundancy',
    '-fhoist-adjacent-loads',
    '-fif-conversion',
    '-fif-conversion2',
    '-findirect-inlining',
    '-finline',
    '-finline-atomics',
    '-finline-functions',
    '-finline-functions-called-once',
    '-finline-small-functions',
    '-finline-stringops',
    # '-fipa-bit-cp',
    # '-fipa-cp',
    # '-fipa-cp-clone',
    # '-fipa-icf',
    # '-fipa-icf-functions',
    # '-fipa-icf-variables',
    # '-fipa-modref',
    # '-fipa-profile',
    # '-fipa-pta',
    # '-fipa-pure-const',
    # '-fipa-ra',
    # '-fipa-reference',
    # '-fipa-reference-addressable',
    # '-fipa-sra',
    # '-fipa-stack-alignment',
    # '-fipa-strict-aliasing',
    # '-fipa-vrp',
    '-fira-hoist-pressure',
    '-fira-loop-pressure',
    '-fira-share-save-slots',
    '-fira-share-spill-slots',
    '-fisolate-erroneous-paths-attribute',
    '-fisolate-erroneous-paths-dereference',
    '-fivopts',
    '-fjump-tables',
    '-fkeep-gc-roots-live',
    '-flate-combine-instructions',
    '-flifetime-dse',
    '-flimit-function-alignment',
    '-flive-range-shrinkage',
    '-floop-interchange',
    '-floop-nest-optimize',
    '-floop-parallelize-all',
    '-floop-unroll-and-jam',
    '-flra-remat',
    '-fmath-errno',
    '-fmodulo-sched',
    '-fmodulo-sched-allow-regmoves',
    '-fmove-loop-invariants',
    '-fmove-loop-stores',
    '-fno-inline-stringops',
    '-fnon-call-exceptions',
    '-fomit-frame-pointer',
    '-fopt-info',
    '-foptimize-sibling-calls',
    '-foptimize-strlen',
    '-fpack-struct',
    '-fpartial-inlining',
    '-fpcc-struct-return',
    '-fpeel-loops',
    '-fpeephole',
    '-fpeephole2',
    '-fplt',
    '-fpredictive-commoning',
    '-fprintf-return-value',
    '-fprofile-partial-training',
    '-fprofile-reorder-functions',
    '-freciprocal-math',
    '-free',
    '-frename-registers',
    '-freorder-blocks',
    '-freorder-blocks-and-partition',
    '-freorder-functions',
    '-frerun-cse-after-loop',
    '-freschedule-modulo-scheduled-loops',
    '-frounding-math',
    '-fsave-optimization-record',
    # '-fsched-critical-path-heuristic',
    # '-fsched-dep-count-heuristic',
    # '-fsched-group-heuristic',
    # '-fsched-interblock',
    # '-fsched-last-insn-heuristic',
    # '-fsched-pressure',
    # '-fsched-rank-heuristic',
    # '-fsched-spec',
    # '-fsched-spec-insn-heuristic',
    # '-fsched-spec-load',
    # '-fsched-spec-load-dangerous',
    # '-fsched-stalled-insns',
    # '-fsched-stalled-insns-dep',
    # '-fsched2-use-superblocks',
    # '-fschedule-fusion',
    # '-fschedule-insns',
    # '-fschedule-insns2',
    # '-fsection-anchors',
    # '-fsel-sched-pipelining',
    # '-fsel-sched-pipelining-outer-loops',
    # '-fsel-sched-reschedule-pipelined',
    # '-fselective-scheduling',
    # '-fselective-scheduling2',
    '-fsemantic-interposition',
    '-fshort-enums',
    '-fshort-wchar',
    '-fshrink-wrap',
    '-fshrink-wrap-separate',
    '-fsignaling-nans',
    '-fsigned-zeros',
    '-fsingle-precision-constant',
    '-fsplit-ivs-in-unroller',
    '-fsplit-loops',
    '-fsplit-paths',
    '-fsplit-wide-types',
    '-fsplit-wide-types-early',
    '-fssa-backprop',
    '-fssa-phiopt',
    '-fstack-clash-protection',
    '-fstack-protector',
    '-fstack-protector-all',
    '-fstack-protector-explicit',
    '-fstack-protector-strong',
    '-fstdarg-opt',
    '-fstore-merging',
    '-fstrict-aliasing',
    '-fthread-jumps',
    '-ftoplevel-reorder',
    '-ftracer',
    '-ftrapping-math',
    '-ftrapv',
    # '-ftree-bit-ccp',
    # '-ftree-builtin-call-dce',
    # '-ftree-ccp',
    # '-ftree-ch',
    # '-ftree-coalesce-vars',
    # '-ftree-copy-prop',
    # '-ftree-cselim',
    # '-ftree-dce',
    # '-ftree-dominator-opts',
    # '-ftree-dse',
    # '-ftree-forwprop',
    # '-ftree-fre',
    # '-ftree-loop-distribute-patterns',
    # '-ftree-loop-distribution',
    # '-ftree-loop-im',
    # '-ftree-loop-ivcanon',
    # '-ftree-loop-optimize',
    # '-ftree-loop-vectorize',
    # '-ftree-lrs',
    # '-ftree-partial-pre',
    # '-ftree-phiprop',
    # '-ftree-pre',
    # '-ftree-pta',
    # '-ftree-reassoc',
    # '-ftree-scev-cprop',
    # '-ftree-sink',
    # '-ftree-slp-vectorize',
    # '-ftree-slsr',
    # '-ftree-sra',
    # '-ftree-switch-conversion',
    # '-ftree-tail-merge',
    # '-ftree-ter',
    # '-ftree-vectorize',
    # '-ftree-vrp',
    '-funconstrained-commons',
    '-funreachable-traps',
    '-funroll-all-loops',
    '-funroll-completely-grow-size',
    '-funroll-loops',
    '-funsafe-math-optimizations',
    '-funswitch-loops',
    '-funwind-tables',
    '-fvar-tracking',
    '-fvar-tracking-assignments',
    '-fvar-tracking-assignments-toggle',
    '-fvar-tracking-uninit',
    '-fvariable-expansion-in-unroller',
    '-fversion-loops-for-strides',
    '-fvpt',
    '-fweb',
    '-fwrapv',
    '-fwrapv-pointer',
    '-gstatement-frontiers',
    '-munroll-only-small-loops',
]